% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_upstream_polygons.R
\name{get_upstream_polygons}
\alias{get_upstream_polygons}
\title{Get Upstream Basin Poylgons}
\usage{
get_upstream_polygons(jnid = NA, strm = NA, rca = NA, dissolve = TRUE)
}
\arguments{
\item{jnid}{Watershed outlet NHN junction nid. Junction ID from NHN_HN_HYDROJUNCT_0 e.g., "92607204bc7e4dcb939fbc57b709be0b"}

\item{strm}{Class sf (multilinestring). Stream lines from NHN working unit (NHN_HN_NLFLOW_1)}

\item{rca}{Class sf (polygon). RCA polygon object returned from \code{generate_rca_polygons}}

\item{dissolve}{should final basin be returned as a dissolved watershed polygon or broken up into RCA polygons? Default is TRUE}
}
\value{
Watershed basin upstream from a point.
}
\description{
Collect all NHN RCA lines upstream from a junction point.
}
\details{
Function takes in a target watershed outlet nid \code{jnid}, RCA polygons and a streamline layer. Function calculates a pseudo upstream drainage basin boundary from a point.
}
\examples{

\dontrun{


filename_strm <- system.file("extdata", "NHN_HN_NLFLOW_1.gpkg", package = "canadaNHN")
filename_basin <- system.file("extdata", "NHN_WORKUNIT_LIMIT_2.gpkg", package = "canadaNHN")

# Load example data
# NHN Streamlines
strm <- sf::st_read(paste0(filename_strm), layer="NHN_HN_NLFLOW_1")
# Drop Z geometry
strm <- sf::st_zm(strm)


# Convert to local UTM zone
strm <- sf::st_transform(strm, util_utm_zone(strm))
sf::st_crs(strm)$epsg
# Basin boundary
basin <- sf::st_read(paste0(filename_basin), layer="NHN_WORKUNIT_LIMIT_2")


# Recommended: Run get_upstream_lines() first with the basin outlet
# this prevents network topology issues with isolated segments

outlet_junction <- '310665e2e3dd4738b26b031a85d2bb19'
strm_fix <- get_upstream_lines(strm = strm, jnid = outlet_junction)


# RCA Polygons from NHN network
rca <- generate_rca_polygons(basin = basin, strm = strm_fix, pt_density_m = 50)

plot(sf::st_geometry(rca), col = "#e0d7ab", border = "#f7f5e9")
plot(sf::st_geometry(strm), col = "#395387", add = TRUE)


# Identify target junction ID for upstream delineation
target_junction <- "c2ad6151e60a49dbabcb59d85eda4cba"

watershed <- get_upstream_polygons(
     jnid = target_junction,
     strm = strm,
     rca = rca,
     dissolve = TRUE)

# View result
plot(sf::st_geometry(watershed), col = "pink", add = TRUE)
out_sl <- strm[strm$fromJunction == target_junction, ]
plot(sf::st_geometry(strm), col = "#395387", add = TRUE)
plot(sf::st_geometry(out_sl), add = TRUE, col = "yellow", lwd = 3)

}

}
